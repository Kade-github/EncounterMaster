# This starter workflow is for a CMake project running on multiple platforms. There is a different starter workflow if you just want a single platform.
# See: https://github.com/actions/starter-workflows/blob/main/ci/cmake-single-platform.yml
name: CMake on multiple platforms

on:
  push:
    branches: [ "master" ]
  pull_request:
    branches: [ "master" ]

jobs:
  build:
    runs-on: ${{ matrix.os }}

    strategy:
      # Set fail-fast to false to ensure that feedback is delivered for all matrix combinations. Consider changing this to true when your workflow is stable.
      fail-fast: false

      # Set up a matrix to run the following configurations:
      # 1. Windows with MSVC
      # 2. Linux with Clang
      # 3. macOS with Clang
      #
      # To add more build types (Release, Debug, RelWithDebInfo, etc.) customize the build_type list.
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        build_type: [Release]
        c_compiler: [clang, cl]
        include:
          - os: windows-latest
            c_compiler: cl
            cpp_compiler: cl
            generator: "Visual Studio 17 2022"
            triplet: "x64-windows"
          - os: ubuntu-latest
            c_compiler: clang
            cpp_compiler: clang++
            generator: "Unix Makefiles"
            triplet: "x64-linux"
          - os: macos-latest
            c_compiler: clang
            cpp_compiler: clang++
            generator: "Ninja"
            triplet: "arm64-osx"
        exclude:
          - os: windows-latest
            c_compiler: clang
          - os: ubuntu-latest
            c_compiler: cl
          - os: macos-latest
            c_compiler: cl

    steps:
    - uses: actions/checkout@v4

    - name: Install Linux build dependencies
      if: matrix.os == 'ubuntu-latest'
      run: |
        sudo apt-get update
        sudo apt-get install -y build-essential cmake make pkg-config 
        sudo apt-get install -y libgl1-mesa-dev libx11-dev
        sudo apt-get install -y autoconf automake libtool gettext
        sudo apt-get install -y libcrypt-dev

    - name: Set reusable strings
      # Turn repeated input strings (such as the build output directory) into step outputs. These step outputs can be used throughout the workflow file.
      id: strings
      shell: bash
      run: |
        echo "build-output-dir=${{ github.workspace }}/build" >> "$GITHUB_OUTPUT"
        echo "artifact-name=${{ matrix.os }}-${{ matrix.c_compiler }}-${{ matrix.build_type }}" >> "$GITHUB_OUTPUT"

    - name: Setup vcpkg
      uses: lukka/run-vcpkg@v11
      with:
        # Optional: specify the vcpkg arguments, e.g. to specify the triplet or use a custom vcpkg repository.
        vcpkgArguments: '@vcpkg.json --triplet=${{ matrix.triplet }}'
    - name: Submodule update
      run: git submodule update --init --recursive
      
    - name: Configure CMake
      # Configure CMake in a 'build' subdirectory. `CMAKE_BUILD_TYPE` is only required if you are using a single-configuration generator such as make.
      # See https://cmake.org/cmake/help/latest/variable/CMAKE_BUILD_TYPE.html?highlight=cmake_build_type
      run: >
        cmake -B ${{ steps.strings.outputs.build-output-dir }}
        -G "${{ matrix.generator }}"
        -DCMAKE_CXX_COMPILER=${{ matrix.cpp_compiler }}
        -DCMAKE_C_COMPILER=${{ matrix.c_compiler }}
        -DCMAKE_BUILD_TYPE=${{ matrix.build_type }}
        -DCMAKE_TOOLCHAIN_FILE=${{ github.workspace }}/vcpkg/scripts/buildsystems/vcpkg.cmake
        -DVCPKG_TARGET_TRIPLET=${{ matrix.os == 'windows-latest' && 'x64-windows' || matrix.os == 'macos-latest' && 'x64-osx' || 'x64-linux' }}
        -S ${{ github.workspace }}
    - name: Build
      # Build your program with the given configuration. Note that --config is needed because the default Windows generator is a multi-config generator (Visual Studio generator).
      run: cmake --build ${{ steps.strings.outputs.build-output-dir }} --config ${{ matrix.build_type }}

    - name: Find Windows binaries
      if: matrix.os == 'windows-latest'
      id: find-windows
      shell: pwsh
      run: |
        $buildDir = "${{ steps.strings.outputs.build-output-dir }}"
        Write-Host "Looking for binaries in: $buildDir"
        
        if (Test-Path $buildDir) {
          # Find executables
          $exes = Get-ChildItem -Path $buildDir -Recurse -Filter "*.exe" -File
          # Find DLLs
          $dlls = Get-ChildItem -Path $buildDir -Recurse -Filter "*.dll" -File
          # Find static libraries
          $libs = Get-ChildItem -Path $buildDir -Recurse -Filter "*.lib" -File
          
          $allBinaries = $exes + $dlls + $libs
          
          if ($allBinaries) {
            foreach ($binary in $allBinaries) {
              Write-Host "Found binary: $($binary.FullName)"
            }
            # Set output for upload - include all binary types
            echo "artifact-path=$buildDir/**/*.exe,$buildDir/**/*.dll,$buildDir/**/*.lib" | Out-File -FilePath $env:GITHUB_OUTPUT -Append
            echo "has-binaries=true" | Out-File -FilePath $env:GITHUB_OUTPUT -Append
          } else {
            Write-Host "No binaries found"
            echo "artifact-path=" | Out-File -FilePath $env:GITHUB_OUTPUT -Append
            echo "has-binaries=false" | Out-File -FilePath $env:GITHUB_OUTPUT -Append
          }
        } else {
          Write-Host "Build directory not found: $buildDir"
          echo "artifact-path=" | Out-File -FilePath $env:GITHUB_OUTPUT -Append
          echo "has-binaries=false" | Out-File -FilePath $env:GITHUB_OUTPUT -Append
        }

    - name: Find Unix binaries
      if: matrix.os != 'windows-latest'
      id: find-unix
      shell: bash
      run: |
        BUILD_DIR="${{ steps.strings.outputs.build-output-dir }}"
        echo "Looking for binaries in: $BUILD_DIR"
        
        if [ -d "$BUILD_DIR" ]; then
          # Find executables
          echo "=== Executables ==="
          find "$BUILD_DIR" -type f -executable | while read file; do
            if [[ ! -d "$file" ]] && ( file "$file" 2>/dev/null | grep -q "ELF\|Mach-O" || [[ "$file" == *".so"* ]] ); then
              echo "Found executable: $file"
            fi
          done
          
          # Find shared libraries (.so, .dylib)
          echo "=== Shared Libraries ==="
          find "$BUILD_DIR" -type f \( -name "*.so" -o -name "*.so.*" -o -name "*.dylib" -o -name "*.dylib.*" \) | while read file; do
            if [[ ! -d "$file" ]]; then
              echo "Found shared library: $file"
            fi
          done
          
          # Find static libraries (.a)
          echo "=== Static Libraries ==="
          find "$BUILD_DIR" -type f -name "*.a" | while read file; do
            if [[ ! -d "$file" ]]; then
              echo "Found static library: $file"
            fi
          done
          
          # Set artifact path to include all binary types
          echo "artifact-path=$BUILD_DIR/**/*" >> "$GITHUB_OUTPUT"
          echo "has-binaries=true" >> "$GITHUB_OUTPUT"
        else
          echo "Build directory not found: $BUILD_DIR"
          echo "artifact-path=" >> "$GITHUB_OUTPUT"
          echo "has-binaries=false" >> "$GITHUB_OUTPUT"
        fi

    - name: Upload build artifacts
      if: steps.find-windows.outputs.has-binaries == 'true' || steps.find-unix.outputs.has-binaries == 'true'
      uses: actions/upload-artifact@v4
      with:
        name: ${{ steps.strings.outputs.artifact-name }}-binaries
        path: ${{ steps.find-windows.outputs.artifact-path || steps.find-unix.outputs.artifact-path }}
        retention-days: 7

    - name: Upload complete build directory
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: ${{ steps.strings.outputs.artifact-name }}-build-dir
        path: ${{ steps.strings.outputs.build-output-dir }}
        retention-days: 3

    - name: Debug build output
      if: failure()
      run: |
        echo "=== Debugging build output ==="
        echo "Workspace: ${{ github.workspace }}"
        echo "Build dir: ${{ steps.strings.outputs.build-output-dir }}"
        if [[ "${{ matrix.os }}" == "windows-latest" ]]; then
          BUILD_DIR=$(echo "${{ steps.strings.outputs.build-output-dir }}" | sed 's/\\/\//g')
        else
          BUILD_DIR="${{ steps.strings.outputs.build-output-dir }}"
        fi
        echo "Checking if build directory exists: $BUILD_DIR"
        if [ -d "$BUILD_DIR" ]; then
          echo "Build directory exists. Contents:"
          find "$BUILD_DIR" -type f -name "*.exe" -o -name "*.dll" -o -type f -executable | head -20
        else
          echo "Build directory does not exist"
          echo "Workspace contents:"
          ls -la "${{ github.workspace }}" || echo "ls failed"
        fi

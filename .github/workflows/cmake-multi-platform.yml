# This starter workflow is for a CMake project running on multiple platforms. There is a different starter workflow if you just want a single platform.
# See: https://github.com/actions/starter-workflows/blob/main/ci/cmake-single-platform.yml
name: CMake on multiple platforms

on:
  push:
    branches: [ "master" ]
  pull_request:
    branches: [ "master" ]

jobs:
  build:
    runs-on: ${{ matrix.os }}

    strategy:
      # Set fail-fast to false to ensure that feedback is delivered for all matrix combinations. Consider changing this to true when your workflow is stable.
      fail-fast: false

      # Set up a matrix to run the following configurations:
      # 1. Windows with MSVC
      # 2. Linux with Clang
      # 3. macOS with Clang
      #
      # To add more build types (Release, Debug, RelWithDebInfo, etc.) customize the build_type list.
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        build_type: [Release]
        c_compiler: [clang, cl]
        include:
          - os: windows-latest
            c_compiler: cl
            cpp_compiler: cl
          - os: ubuntu-latest
            c_compiler: clang
            cpp_compiler: clang++
          - os: macos-latest
            c_compiler: clang
            cpp_compiler: clang++
        exclude:
          - os: windows-latest
            c_compiler: clang
          - os: ubuntu-latest
            c_compiler: cl
          - os: macos-latest
            c_compiler: cl

    steps:
    - uses: actions/checkout@v4

    - name: Set reusable strings
      # Turn repeated input strings (such as the build output directory) into step outputs. These step outputs can be used throughout the workflow file.
      id: strings
      shell: bash
      run: |
        echo "build-output-dir=${{ github.workspace }}/build" >> "$GITHUB_OUTPUT"
        echo "artifact-name=${{ matrix.os }}-${{ matrix.c_compiler }}-${{ matrix.build_type }}" >> "$GITHUB_OUTPUT"

    - name: Setup vcpkg
      uses: lukka/run-vcpkg@v11
      with:
        # Optional: specify the vcpkg commit id to use, defaults to the latest one of the vcpkg repository.
        vcpkgCommitId: 'a0f95bc760ed5c8f6d553aaff7dde3a9c4f605a2'
        # Optional: specify the vcpkg arguments, e.g. to specify the triplet or use a custom vcpkg repository.
        vcpkgArguments: '@vcpkg.json'

    - name: Configure CMake
      # Configure CMake in a 'build' subdirectory. `CMAKE_BUILD_TYPE` is only required if you are using a single-configuration generator such as make.
      # See https://cmake.org/cmake/help/latest/variable/CMAKE_BUILD_TYPE.html?highlight=cmake_build_type
      run: >
        cmake -B ${{ steps.strings.outputs.build-output-dir }}
        -DCMAKE_CXX_COMPILER=${{ matrix.cpp_compiler }}
        -DCMAKE_C_COMPILER=${{ matrix.c_compiler }}
        -DCMAKE_BUILD_TYPE=${{ matrix.build_type }}
        -DCMAKE_TOOLCHAIN_FILE=${{ github.workspace }}/vcpkg/scripts/buildsystems/vcpkg.cmake
        -S ${{ github.workspace }}

    - name: Build
      # Build your program with the given configuration. Note that --config is needed because the default Windows generator is a multi-config generator (Visual Studio generator).
      run: cmake --build ${{ steps.strings.outputs.build-output-dir }} --config ${{ matrix.build_type }}

    - name: Test
      working-directory: ${{ steps.strings.outputs.build-output-dir }}
      # Execute tests defined by the CMake configuration. Note that --build-config is needed because the default Windows generator is a multi-config generator (Visual Studio generator).
      # See https://cmake.org/cmake/help/latest/manual/ctest.1.html for more detail
      run: ctest --build-config ${{ matrix.build_type }}

    - name: Find built executables
      id: find-binaries
      shell: bash
      run: |
        # Find all executable files in the build directory
        if [[ "${{ matrix.os }}" == "windows-latest" ]]; then
          # On Windows, look for .exe files
          find ${{ steps.strings.outputs.build-output-dir }} -name "*.exe" -type f | while read file; do
            echo "Found executable: $file"
          done
          # Prepare artifact path for Windows
          echo "artifact-path=${{ steps.strings.outputs.build-output-dir }}/**/*.exe" >> "$GITHUB_OUTPUT"
        else
          # On Linux/macOS, look for executable files without extension
          find ${{ steps.strings.outputs.build-output-dir }} -type f -executable | while read file; do
            # Exclude directories and non-binary files
            if [[ ! -d "$file" ]] && file "$file" | grep -q "ELF\|Mach-O"; then
              echo "Found executable: $file"
            fi
          done
          # Prepare artifact path for Unix-like systems
          echo "artifact-path=${{ steps.strings.outputs.build-output-dir }}/**/*" >> "$GITHUB_OUTPUT"
        fi

    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: ${{ steps.strings.outputs.artifact-name }}
        path: ${{ steps.find-binaries.outputs.artifact-path }}
        retention-days: 7

    - name: Upload test results
      if: always()  # Upload test results even if tests fail
      uses: actions/upload-artifact@v4
      with:
        name: ${{ steps.strings.outputs.artifact-name }}-test-results
        path: |
          ${{ steps.strings.outputs.build-output-dir }}/Testing/**/*.xml
          ${{ steps.strings.outputs.build-output-dir }}/**/*.xml
        retention-days: 7
